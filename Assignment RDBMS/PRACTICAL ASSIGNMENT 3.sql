CREATE TABLE
    ZONE (ZONEID INT PRIMARY KEY, ZONENAME VARCHAR2 (20));

CREATE TABLE
    WARD (
        WARDID INT PRIMARY KEY,
        ZONEID INT NOT NULL,
        WARDNAME VARCHAR2 (20),
        FOREIGN KEY (ZONEID) REFERENCES ZONE (ZONEID)
    );

CREATE TABLE
    PATIENTCATEGORYMASTER (
        CATEGORYID INT PRIMARY KEY,
        CATEGORYNAME VARCHAR2 (50)
    );

CREATE TABLE
    PATIENTMASTER (
        PATIENTID INT PRIMARY KEY,
        PATIENTNAME VARCHAR2 (20),
        CATEGORYID INT NOT NULL,
        WARDID INT,
        ADMITTEDDATE DATE,
        
SELECT * 
FROM PATIENTMASTER P , WARD W , ZONE Z
WHERE Z.ZONEID = W.ZONEID
AND W.WARDID = P.WARDID DATE,
        FOREIGN KEY (CATEGORYID) REFERENCES PATIENTCATEGORYMASTER (CATEGORYID),
        FOREIGN KEY (WARDID) REFERENCES WARD (WARDID)
    );


INSERT ALL
    INTO ZONE (ZONEID, ZONENAME) VALUES (1, 'ATHWA')
    INTO ZONE (ZONEID, ZONENAME) VALUES (2, 'VARCHA')
    INTO ZONE (ZONEID, ZONENAME) VALUES (3, 'NANPURA')
    INTO ZONE (ZONEID, ZONENAME) VALUES (4, 'VESU')
    INTO ZONE (ZONEID, ZONENAME) VALUES (5, 'DINDOLI')
    INTO ZONE (ZONEID, ZONENAME) VALUES (6, 'DUMAS')
    INTO ZONE (ZONEID, ZONENAME) VALUES (7, 'RANDER')
    INTO ZONE (ZONEID, ZONENAME) VALUES (8, 'PAL')
    SELECT * FROM dual;


INSERT ALL
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (1, 1, 'GHOD DOD')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (2, 1, 'BHATAR')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (3, 2, 'MOTA VARCHA')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (4, 2, 'SARTHNA')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (5, 3, 'TIMALAYAWADI')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (6, 3, 'NANPUR LIBRARY')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (7, 4, 'VIP ROAD')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (8, 4, 'VESU GAM')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (9, 5, 'DINDOLI WEST')
    INTO WARD (WARDID, ZONEID, WARDNAME) VALUES (10, 5, 'DINDOLI EAST')
    SELECT * FROM dual;


INSERT ALL
    INTO PATIENTCATEGORYMASTER (CATEGORYID, CATEGORYNAME) VALUES (1, 'MILD')
    INTO PATIENTCATEGORYMASTER (CATEGORYID, CATEGORYNAME) VALUES (2, 'MODERATE')
    INTO PATIENTCATEGORYMASTER (CATEGORYID, CATEGORYNAME) VALUES (3, 'CRITICAL')
    INTO PATIENTCATEGORYMASTER (CATEGORYID, CATEGORYNAME) VALUES (4, 'CRITICAL ON VENTILATOR')
    SELECT * FROM dual;


INSERT ALL
    INTO PATIENTMASTER VALUES (1, 'RAHUL', 1, 1, '10-JUN-2025', '20-JUN-2025')
    INTO PATIENTMASTER VALUES (2, 'AMIT', 2, 2, '25-JUL-2025', NULL)
    INTO PATIENTMASTER VALUES (3, 'VIKAS', 3, 3, '01-JUN-2025', '18-JUN-2025')
    INTO PATIENTMASTER VALUES (4, 'SANJAY', 4, 4, '28-JUL-2025', NULL)
    INTO PATIENTMASTER VALUES (5, 'RAJESH', 2, 5, '30-MAY-2025', '15-JUN-2025')
    INTO PATIENTMASTER VALUES (6, 'KIRAN', 1, 6, '29-JUL-2025', NULL)
    INTO PATIENTMASTER VALUES (7, 'SURESH', 3, 7, '10-MAY-2025', '20-MAY-2025')
    INTO PATIENTMASTER VALUES (8, 'MANISH', 4, 8, '05-AUG-2025', NULL)
    INTO PATIENTMASTER VALUES (9, 'ARUN', 2, 9, '18-MAY-2025', '02-JUN-2025')
    INTO PATIENTMASTER VALUES (10, 'VIJAY', 1, 10, '06-AUG-2025', NULL)
    INTO PATIENTMASTER VALUES (11, 'RAMESH', 1, 1, '25-JUL-2025', '02-AUG-2025')
    INTO PATIENTMASTER VALUES (12, 'AJAY', 2, 2, '30-JUL-2025', NULL)
    INTO PATIENTMASTER VALUES (13, 'PANKAJ', 3, 3, '01-AUG-2025', '08-AUG-2025')
    INTO PATIENTMASTER VALUES (14, 'SUNIL', 4, 4, '21-JUL-2025', NULL)
    INTO PATIENTMASTER VALUES (15, 'DEEPAK', 2, 5, '03-AUG-2025', NULL)
    INTO PATIENTMASTER VALUES (16, 'ASHOK', 1, 6, '22-JUL-2025', '05-AUG-2025')
    INTO PATIENTMASTER VALUES (17, 'PRAVEEN', 3, 7, '27-JUL-2025', NULL)
    INTO PATIENTMASTER VALUES (18, 'JITENDRA', 4, 8, '05-AUG-2025', NULL)
    INTO PATIENTMASTER VALUES (19, 'NITESH', 1, 9, '08-AUG-2025', '10-AUG-2025')
    INTO PATIENTMASTER VALUES (20, 'ANIL', 2, 10, '09-AUG-2025', NULL)
    INTO PATIENTMASTER VALUES (21, 'HARISH', 3, 1, '06-AUG-2025', NULL)
    INTO PATIENTMASTER VALUES (22, 'LOKESH', 4, 2, '09-AUG-2025', NULL)
    SELECT * FROM dual;


-- 1) Create sequence to generate PatientID and use the same while entering data into Patient Master Table.

    CREATE SEQUENCE SQPATIENT
    MINVALUE 1
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

    -- Insertion

    INSERT INTO PATIENTMASTER VALUES (SQPATIENT.NEXTVAL,'FARHAN',101,1001,'08-AUG-2025',NULL);
    INSERT INTO PATIENTMASTER VALUES (SQPATIENT.NEXTVAL,'HRITHIK',101,1001,'08-AUG-2025',NULL);





-- 2) Create 3 different stored procedure to perform INSERT, UPDATE and DELETE operation on Patient Master table.
-- Procedure for Insertion



--INSERT

CREATE OR REPLACE PROCEDURE INSERTINPATIENTMASTER

(
    TPATIENTID  PATIENTMASTER.PATIENTID%TYPE,
    TPATIENTNAME PATIENTMASTER.PATIENTNAME%TYPE,
    TCATEGORYID PATIENTMASTER.CATEGORYID%TYPE,
    TWARDID PATIENTMASTER.WARDID%TYPE,
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE,
    TDISCHARGEDDATE PATIENTMASTER.DISCHARGEDDATE%TYPE
)
AS
BEGIN
    INSERT INTO PATIENTMASTER VALUES (TPATIENTID,TPATIENTNAME,TCATEGORYID,TWARDID,TADMITTEDDATE,TDISCHARGEDDATE);
END;



-- UPDATE

CREATE OR REPLACE PROCEDURE UPDATEPATIENTMASTER

(
    TPATIENTID PATIENTMASTER.PATIENTID%TYPE,
    TPATIENTNAME PATIENTMASTER.PATIENTNAME%TYPE,
    TCATEGORYID PATIENTMASTER.CATEGORYID%TYPE,
    TWARDID PATIENTMASTER.WARDID%TYPE,
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE,
    TDISCHARGEDDATE PATIENTMASTER.DISCHARGEDDATE%TYPE
)

AS
BEGIN
    UPDATE PATIENTMASTER
    SET PATIENTNAME = TPATIENTNAME,
        CATEGORYID = TCATEGORYID,
        WARDID = TWARDID,
        ADMITTEDDATE = TADMITTEDDATE,
        DISCHARGEDDATE = TDISCHARGEDDATE
    WHERE PATIENTID = TPATIENTID;
END;



--DELETE
CREATE OR REPLACE PROCEDURE DELETEFROMPATIENTMASTER
(
    TPATIENTID PATIENTMASTER.PATIENTID%TYPE
)

AS
BEGIN
    DELETE PATIENTMASTER
    WHERE PATIENTID = TPATIENTID;
END;




-- 2 FIND BY ZONE
CREATE OR REPLACE PROCEDURE FINDBYZONE
(TZONENAME ZONE.ZONENAME%TYPE)
AS
    CNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM PATIENTMASTER P , WARD W , ZONE Z
    WHERE W.WARDID = P.WARDID
    AND Z.ZONEID = W.ZONEID
    AND Z.ZONENAME = TZONENAME;
    
    DBMS_OUTPUT.PUT_LINE('TOTAL CONUT IS : '|| CNT);
END;

--CALL
BEGIN
    FINDBYZONE('ATHWA');
END;
   



-- 3 FIND BY WARDNAME


CREATE OR REPLACE PROCEDURE FINDBYWARDNAME
(WNAME WARD.WARDNAME%TYPE)
AS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO VCOUNT
    FROM PATIENTMASTER P , WARD W
    WHERE W.WARDID = P.WARDID
    AND W.WARDNAME = WNAME;

DBMS_OUTPUT.PUT_LINE('TOTAL WARD IS : ' || VCOUNT);
END;


BEGIN
    FINDBYWARDNAME('BHATAR');
END;


-- 5  Create stored procedure to get list of patient admitted on a specific date. For example getPatientList(’1-JAN-2021’)
CREATE OR REPLACE PROCEDURE getPatientList
(TDATE PATIENTMASTER.ADMITTEDDATE%TYPE)
AS
    CURSOR VDATA IS SELECT *
    FROM PATIENTMASTER
    WHERE ADMITTEDDATE = TDATE;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ADMITTEDDATE);
    END LOOP;
END;


BEGIN
    getPatientList(TO_DATE('25-JUL-2025', 'DD-MON-YYYY'));
END;


-- 6 Display the list of Patient admitted with a particular category. For example getPatientListbyCategory(’Critical on Ventilator’)
CREATE OR REPLACE PROCEDURE getPatientListbyCategory
(VCATEGORYNAME PATIENTCATEGORYMASTER.CATEGORYNAME%TYPE)
AS
    CURSOR VDATA IS SELECT P.PATIENTID , P.PATIENTNAME , PC.CATEGORYNAME
    FROM PATIENTMASTER P , PATIENTCATEGORYMASTER PC
    WHERE PC.CATEGORYID = P.CATEGORYID
    AND PC.CATEGORYNAME = VCATEGORYNAME;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.CATEGORYNAME);
    END LOOP;
END;
    

BEGIN
    getPatientListbyCategory('MILD');
END;

-- 7 Create stored procedure that will display list of patient for a particular admitted and discharge dates.

CREATE OR REPLACE PROCEDURE  SpDateRange
(
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE,
    TDISCHARGEDDATE PATIENTMASTER.DISCHARGEDDATE%TYPE
)
AS
    CURSOR VDATA IS SELECT * 
    FROM PATIENTMASTER
    WHERE ADMITTEDDATE = TADMITTEDDATE
    AND DISCHARGEDDATE = TDISCHARGEDDATE;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ADMITTEDDATE||' '||REC.DISCHARGEDDATE);
    END LOOP;
END;


BEGIN
    SpDateRange('10-JUN-25','20-JUN-25');
END;


-- 8 Create a stored procedure that will display count of total patient admitted of a particular category name.
CREATE OR REPLACE PROCEDURE spCountCategoryName
(TCATEGORYNAME PATIENTCATEGORYMASTER.CATEGORYNAME%TYPE)
AS
    TDATA NUMBER;
BEGIN
    SELECT COUNT(*) INTO TDATA
    FROM PATIENTMASTER P , PATIENTCATEGORYMASTER PC
    WHERE PC.CATEGORYID = P.CATEGORYID
    AND PC.CATEGORYNAME = TCATEGORYNAME;
    DBMS_OUTPUT.PUT_LINE('total is : '||TDATA);
END;


BEGIN
spCountCategoryName('MILD');
END;


-- 9 Create a stored procedure that will display count of total patient who were admitted on a particular date and category name.
CREATE OR REPLACE PROCEDURE spCountCategoryNameandDate
(
    TCATEGORYNAME PATIENTCATEGORYMASTER.CATEGORYNAME%TYPE,
    TDATE PATIENTMASTER.ADMITTEDDATE%TYPE
)
AS
    CURSOR VDATA IS SELECT P.PATIENTID , P.PATIENTNAME , P.ADMITTEDDATE , PC.CATEGORYNAME
    FROM PATIENTMASTER P , PATIENTCATEGORYMASTER PC
    WHERE PC.CATEGORYID = P.CATEGORYID
    AND P.ADMITTEDDATE = TDATE
    AND PC.CATEGORYNAME = TCATEGORYNAME;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ADMITTEDDATE||' '||REC.CATEGORYNAME);
    END LOOP;
END;



BEGIN
    spCountCategoryNameandDate('MILD','10-JUN-25');
END;



-- 10 Create a stored procedure that will will display list of patient details who are not discharged yet since a specified Admitted date.
CREATE OR REPLACE PROCEDURE SpNotDischargedbyAdmDate
(
    TDISCHARGEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE
)
AS
    CURSOR VDATA IS SELECT * 
    FROM PATIENTMASTER
    WHERE ADMITTEDDATE = TDISCHARGEDDATE
    AND DISCHARGEDDATE IS NULL;
BEGIN 
    FOR REC IN VDATA LOOP
    DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ADMITTEDDATE);
    END LOOP;
END;


BEGIN
SpNotDischargedbyAdmDate('25-JUL-25');
END;


-- 11 Create a stored procedure that will take ZoneName as an input and display list of patient who are not discharged  yet.
CREATE OR REPLACE PROCEDURE SpNotDischargedbyZoneName
(
    TZONENAME ZONE.ZONENAME%TYPE
)
AS
    CURSOR VDATA IS SELECT P.PATIENTID , P.PATIENTNAME , Z.ZONENAME , P.ADMITTEDDATE
    FROM PATIENTMASTER P , WARD W , ZONE Z
    WHERE Z.ZONEID = W.ZONEID
    AND W.WARDID = P.WARDID
    AND P.DISCHARGEDDATE IS NULL
    AND Z.ZONENAME = TZONENAME;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ZONENAME||' '||REC.ADMITTEDDATE);
    END LOOP;
END;


BEGIN
    SpNotDischargedbyZoneName('ATHWA');
END;

-- 12 Create a stored procedure that will take ZoneName and Admitted Date as an input and display list of patient who are not discharged yet.
CREATE OR REPLACE PROCEDURE SpNotDischargedbyZNandDate
(
    TZONENAME ZONE.ZONENAME%TYPE,
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE
)
AS
    CURSOR VDATA IS SELECT P.PATIENTID , P.PATIENTNAME , Z.ZONENAME , P.ADMITTEDDATE
    FROM PATIENTMASTER P , WARD W , ZONE Z
    WHERE Z.ZONEID = W.ZONEID
    AND W.WARDID = P.WARDID
    AND P.DISCHARGEDDATE IS NULL
    AND Z.ZONENAME = TZONENAME
    AND P.ADMITTEDDATE = TADMITTEDDATE;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ZONENAME||' '||REC.ADMITTEDDATE);
    END LOOP;
END;

BEGIN
    SpNotDischargedbyZNandDate('ATHWA ','25-JUL-25');
END;

--13 Create a stored procedure that will take WardName as an input and display list of patient who are not discharged yet.
CREATE OR REPLACE PROCEDURE SpNotDischargedbyWardName
(
    TWARDNAME WARD.WARDNAME%TYPE
)
AS
    CURSOR VDATA IS SELECT P.PATIENTID , P.PATIENTNAME , Z.ZONENAME , P.ADMITTEDDATE , W.WARDNAME
    FROM PATIENTMASTER P , WARD W , ZONE Z
    WHERE Z.ZONEID = W.ZONEID
    AND W.WARDID = P.WARDID
    AND P.DISCHARGEDDATE IS NULL
    AND W.WARDNAME = TWARDNAME;
BEGIN
    FOR REC IN VDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTID||' '||REC.PATIENTNAME||' '||REC.ZONENAME||' '||REC.ADMITTEDDATE||' '||REC.WARDNAME);
    END LOOP;
END;


BEGIN
    SpNotDischargedbyWardName('BHATAR');
END;
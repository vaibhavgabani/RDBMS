CREATE TABLE
    ZONE (ZONEID INT PRIMARY KEY, ZONENAME VARCHAR2 (20));


CREATE TABLE
    WARD (
        WARDID INT PRIMARY KEY,
        ZONEID INT NOT NULL,
        WARDNAME VARCHAR2 (20),
        FOREIGN KEY (ZONEID) REFERENCES ZONE (ZONEID)
    );

CREATE TABLE
    PATIENTCATEGORYMASTER (
        CATEGORYID INT PRIMARY KEY,
        CATEGORYNAME VARCHAR2 (50)
    );


CREATE TABLE
    PATIENTMASTER (
        PATIENTID INT PRIMARY KEY,
        PATIENTNAME VARCHAR2 (20),
        CATEGORYID INT NOT NULL,
        WARDID INT,
        ADMITTEDDATE DATE, 
        DISCHARGEDDATE DATE
    );


-- Q1
CREATE SEQUENCE SQPATIENT
START WITH 1
INCREMENT BY 1
MINVALUE 1
NOCACHE;

CREATE OR REPLACE PROCEDURE INSERTINPATIENTMASTER
(
    TNAME PATIENTMASTER.PATIENTNAME%TYPE,
    TCATEGORYID PATIENTMASTER.CATEGORYID%TYPE,
    TWARDID PATIENTMASTER.WARDID%TYPE,
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE,
    DISCHARGEDDATE PATIENTMASTER.DISCHARGEDDATE%TYPE
)
AS
BEGIN
    INSERT INTO PATIENTMASTER VALUES (SQPATIENT.NEXTVAL,TNAME,TCATEGORYID,TWARDID,TADMITTEDDATE,DISCHARGEDDATE);
END;


CREATE OR REPLACE PROCEDURE DELETEDATA
(
    TID PATIENTMASTER.PATIENTID%TYPE
)
AS
BEGIN
    DELETE FROM PATIENTMASTER WHERE PATIENTID = TID;
END;


CREATE OR REPLACE PROCEDURE UPDATEPATENETMASTER
(
    TID PATIENTMASTER.PATIENTID%TYPE,
    TNAME PATIENTMASTER.PATIENTNAME%TYPE,
    TCATEGORYID PATIENTMASTER.CATEGORYID%TYPE,
    TWARDID PATIENTMASTER.WARDID%TYPE,
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE,
    TDISCHARGEDDATE PATIENTMASTER.DISCHARGEDDATE%TYPE
)
AS
BEGIN
    UPDATE PATIENTMASTER
    SET PATIENTNAME = TNAME,
    CATEGORYID = TCATEGORYID,
    WARDID = TWARDID,
    ADMITTEDDATE = TADMITTEDDATE,
    DISCHARGEDDATE = TDISCHARGEDDATE
    WHERE PATIENTID = TID;
END;



-- Q3
CREATE OR REPLACE PROCEDURE GetZoneCount
(
    TZONENAME ZONE.ZONENAME%TYPE
)
AS
    TOT NUMBER;
BEGIN
    SELECT COUNT(*) AS TOTAL INTO TOT
    FROM ZONE Z, WARD W,PATIENTMASTER P
    WHERE Z.ZONEID = W.ZONEID
    AND W.WARDID = P.WARDID
    AND Z.ZONENAME = TZONENAME;

    DBMS_OUTPUT.PUT_LINE('TOTAL IS :'||TOT);
END;


BEGIN
GetZoneCount('ÁTHWA');
END;


-- Q4
CREATE OR REPLACE PROCEDURE GetWardCount
(
    TWARDNAME WARD.WARDNAME%TYPE
)
AS
    TOT NUMBER;
BEGIN
    SELECT COUNT(*) AS TOTAL INTO TOT
    FROM PATIENTMASTER P , WARD W
    WHERE W.WARDID = P.WARDID
    AND W.WARDNAME = TWARDNAME;
    DBMS_OUTPUT.PUT_LINE('TOTAL IS : '|| TOT);
END;

BEGIN
GetWardCount('BHATAR');
END;

CREATE OR REPLACE PROCEDURE getPatientList
(
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE
)
AS
    CURSOR TDATA IS 
    SELECT *
    FROM PATIENTMASTER
    WHERE ADMITTEDDATE = TADMITTEDDATE;
BEGIN
    FOR REC IN TDATA LOOP
    DBMS_OUTPUT.PUT_LINE(REC.PATIENTID || REC.PATIENTNAME || REC.ADMITTEDDATE);
    END LOOP;
END;

BEGIN
getPatientList('1-JAN-2025');
END;


CREATE OR REPLACE PROCEDURE spCountCategoryNameandDate
(
    TCATEGORYNAME PATIENTCATEGORYMASTER.CATEGORYNAME%TYPE,
    TADMITTEDDATE PATIENTMASTER.ADMITTEDDATE%TYPE
)
AS
    TCNT NUMBER;
BEGIN 
    SELECT COUNT(*) INTO TCNT
    FROM PATIENTMASTER P , PATIENTCATEGORYMASTER C
    WHERE C.CATEGORYID = P.CATEGORYID
    AND C.CATEGORYNAME = TCATEGORYNAME
    AND TRUNC(P.ADMITTEDDATE) = TRUNC(TADMITTEDDATE);

    DBMS_OUTPUT.PUT_LINE('TOTAL IS : '|| TCNT);
END;

BEGIN
spCountCategoryNameandDate('MILD','1-JAN-2025');
END;



CREATE OR REPLACE PROCEDURE SpNotDischargedbyWardName
(
    TWARDNAME WARD.WARDNAME%TYPE
)
AS
    CURSOR TDATA IS 
    SELECT P.PATIENTNAME , W.WARDNAME
    FROM PATIENTMASTER P , WARD W
    WHERE W.WARDID = P.WARDID
    AND W.WARDNAME = TWARDNAME
    AND DISCHARGEDDATE IS NULL;
BEGIN
    FOR REC IN TDATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.PATIENTNAME || ' ' || REC.WARDNAME);
    END LOOP;
END;


BEGIN
SpNotDischargedbyWardName('BHATAR');
END;


-- EXTRA
CREATE OR REPLACE TRIGGER TRG_CUSTOMERS_BI
BEFORE INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
    -- This is the required query for Oracle 10g/11g.
    -- It gets the next value from the sequence and assigns it
    -- to the new row's customer_id before it is saved.
    SELECT customers_seq.NEXTVAL
    INTO :NEW.customer_id
    FROM dual;
END;
/
-- Q1 TOTAL NUMBER OF PATICEN IN EACH ZONE 



CREATE OR REPLACE PROCEDURE TOTZONEBYWARDBY
AS
    CURSOR ADATA IS 
    SELECT COUNT(*) AS TOTAL,Z.ZONENAME,W.WARDNAME
    FROM ZONE Z , WARD W , PATIENTMASTER P
    WHERE Z.ZONEID = W.ZONEID
    AND W.WARDID = P.WARDID
    GROUP BY(Z.ZONENAME,W.WARDNAME);
BEGIN
    FOR REC IN ADATA LOOP
        DBMS_OUTPUT.PUT_LINE('TOTAL : '|| REC.TOTAL || ' ZONE NAME :' || REC.ZONENAME || ' WARD NAME : '|| REC.WARDNAME);
    END LOOP;
END;


BEGIN 
TOTZONEBYWARDBY();
END;


--Q2 total number of patients admitted in each Zone. 

CREATE OR REPLACE PROCEDURE TOTXONEBY
AS
CURSOR ADATA IS 
    SELECT COUNT(*) AS TOTAL,Z.ZONENAME
    FROM ZONE Z , WARD W , PATIENTMASTER P
    WHERE Z.ZONEID = W.ZONEID
    AND W.WARDID = P.WARDID
    GROUP BY(Z.ZONENAME);
BEGIN
    FOR REC IN ADATA LOOP
        DBMS_OUTPUT.PUT_LINE(REC.TOTAL || ' ' || REC.ZONENAME);
    END LOOP;
END;


BEGIN 
TOTXONEBY();
END;

-- Q3 Display the patient details who stayed for more than 10 days in the hospital (use AdmittedDate and DischargeDate). 

SELECT (DISCHARGEDDATE - ADMITTEDDATE)AS DAYS_STAYED,PATIENTID,PATIENTNAME
FROM PATIENTMASTER
WHERE (DISCHARGEDDATE - ADMITTEDDATE) > 10;


-- Q6 TRIGGER FOR  prevent inserting a patient with a DischargeDate earlier than AdmittedDate

CREATE OR REPLACE TRIGGER NOENTERY 
BEFORE INSERT ON PATIENTMASTER
FOR EACH ROW 
BEGIN 
    IF :NEW.ADMITTEDDATE > :NEW.DISCHARGEDDATE THEN
        DBMS_OUTPUT.PUT_LINE('ADMITTEDDATE IS BIGGER THAN DISCHARGEDDATE');
    END IF;
END;

INSERT INTO PATIENTMASTER (PATIENTID,PATIENTNAME,CATEGORYID,ADMITTEDDATE,DISCHARGEDDATE) VALUES (78,'KAMO',1,TO_DATE('10-JAN-2025','DD-MON-YY'),TO_DATE('10-JAN-2020','DD-MON-YY'));
SELECT * FROM PATIENTCATEGORYMASTER


-- Q11 Write a function GetStayDuration(p_id IN NUMBER) that returns the total number of days a patient stayed. 

CREATE OR REPLACE function GetStayDuration
(
    TPATIENTID PATIENTMASTER.PATIENTID%TYPE
)
RETURN NUMBER
AS
    TMPDATA NUMBER;
BEGIN
    SELECT (DISCHARGEDDATE-ADMITTEDDATE) INTO TMPDATA
    FROM PATIENTMASTER
    WHERE PATIENTID = PATIENTID;

    DBMS_OUTPUT.PUT_LINE(TMPDATA);
    RETURN TMPDATA;
END;

-- CALL 
SELECT GetStayDurationSD(3) FROM DUAL;